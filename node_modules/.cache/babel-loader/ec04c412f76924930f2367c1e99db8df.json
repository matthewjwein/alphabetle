{"ast":null,"code":"import { solution } from './words';\nexport const getDistances = guesses => {\n  const charObj = {};\n  guesses.forEach(word => {\n    word.split('').forEach((letter, i) => {\n      const correctLetterPos = solution[i].charCodeAt(0) - 65;\n      const guessedLetterPos = letter.charCodeAt(0) - 65;\n      const delta = guessedLetterPos - correctLetterPos;\n      return charObj[letter] = delta;\n    });\n  });\n  return charObj;\n};\nexport const getStatuses = guesses => {\n  const charObj = {};\n  guesses.forEach(word => {\n    word.split('').forEach((letter, i) => {\n      if (!solution.includes(letter)) {\n        // make status absent\n        return charObj[letter] = 'absent';\n      }\n\n      if (letter === solution[i]) {\n        //make status correct\n        return charObj[letter] = 'correct';\n      }\n\n      if (charObj[letter] !== 'correct') {\n        //make status present\n        return charObj[letter] = 'present';\n      }\n    });\n  });\n  return charObj;\n};\nexport const getGuessStatuses = guess => {\n  const splitSolution = solution.split('');\n  const splitGuess = guess.split('');\n  const solutionCharsTaken = splitSolution.map(_ => false);\n  const statuses = Array.from(Array(guess.length)); // handle all correct cases first\n\n  splitGuess.forEach((letter, i) => {\n    if (letter === splitSolution[i]) {\n      statuses[i] = 'correct';\n      solutionCharsTaken[i] = true;\n      return;\n    }\n  });\n  splitGuess.forEach((letter, i) => {\n    if (statuses[i]) return;\n\n    if (!splitSolution.includes(letter)) {\n      // handles the absent case\n      statuses[i] = 'absent';\n      return;\n    } // now we are left with \"present\"s\n\n\n    const indexOfPresentChar = splitSolution.findIndex((x, index) => x === letter && !solutionCharsTaken[index]);\n\n    if (indexOfPresentChar > -1) {\n      statuses[i] = 'present';\n      solutionCharsTaken[indexOfPresentChar] = true;\n      return;\n    } else {\n      statuses[i] = 'absent';\n      return;\n    }\n  });\n  return statuses;\n};","map":{"version":3,"sources":["/Users/matthewwein/Desktop/Game/react-wordle/src/lib/statuses.ts"],"names":["solution","getDistances","guesses","charObj","forEach","word","split","letter","i","correctLetterPos","charCodeAt","guessedLetterPos","delta","getStatuses","includes","getGuessStatuses","guess","splitSolution","splitGuess","solutionCharsTaken","map","_","statuses","Array","from","length","indexOfPresentChar","findIndex","x","index"],"mappings":"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","sourcesContent":["import { solution } from './words'\n\nexport type CharStatus = 'absent' | 'present' | 'correct'\n\nexport const getDistances = (\n  guesses: string[]\n): { [key: string]: number } => {\n  const charObj: { [key: string]: number } = {}\n\n  guesses.forEach((word) => {\n    word.split('').forEach((letter, i) => {\n      const correctLetterPos = solution[i].charCodeAt(0) - 65\n      const guessedLetterPos = letter.charCodeAt(0) - 65\n\n      const delta = guessedLetterPos - correctLetterPos\n\n      return (charObj[letter] = delta)\n    })\n  })\n\n  return charObj\n}\n\nexport const getStatuses = (\n  guesses: string[]\n): { [key: string]: CharStatus } => {\n  const charObj: { [key: string]: CharStatus } = {}\n\n  guesses.forEach((word) => {\n    word.split('').forEach((letter, i) => {\n      if (!solution.includes(letter)) {\n        // make status absent\n        return (charObj[letter] = 'absent')\n      }\n\n      if (letter === solution[i]) {\n        //make status correct\n        return (charObj[letter] = 'correct')\n      }\n\n      if (charObj[letter] !== 'correct') {\n        //make status present\n        return (charObj[letter] = 'present')\n      }\n    })\n  })\n\n  return charObj\n}\n\nexport const getGuessStatuses = (guess: string): CharStatus[] => {\n  const splitSolution = solution.split('')\n  const splitGuess = guess.split('')\n\n  const solutionCharsTaken = splitSolution.map((_) => false)\n\n  const statuses: CharStatus[] = Array.from(Array(guess.length))\n\n  // handle all correct cases first\n  splitGuess.forEach((letter, i) => {\n    if (letter === splitSolution[i]) {\n      statuses[i] = 'correct'\n      solutionCharsTaken[i] = true\n      return\n    }\n  })\n\n  splitGuess.forEach((letter, i) => {\n    if (statuses[i]) return\n\n    if (!splitSolution.includes(letter)) {\n      // handles the absent case\n      statuses[i] = 'absent'\n      return\n    }\n\n    // now we are left with \"present\"s\n    const indexOfPresentChar = splitSolution.findIndex(\n      (x, index) => x === letter && !solutionCharsTaken[index]\n    )\n\n    if (indexOfPresentChar > -1) {\n      statuses[i] = 'present'\n      solutionCharsTaken[indexOfPresentChar] = true\n      return\n    } else {\n      statuses[i] = 'absent'\n      return\n    }\n  })\n\n  return statuses\n}\n"]},"metadata":{},"sourceType":"module"}