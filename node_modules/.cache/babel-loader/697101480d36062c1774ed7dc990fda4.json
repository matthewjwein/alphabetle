{"ast":null,"code":"import { getGuessDistances } from './statuses';\nimport { solutionIndex } from './words';\nimport { GAME_TITLE } from '../constants/strings';\nimport { VERY_CLOSE_DISTANCE } from '../constants/settings';\nexport const shareStatus = (guesses, lost, isHardMode) => {\n  navigator.clipboard.writeText(`${GAME_TITLE} ${solutionIndex} ${lost ? 'X' : guesses.length}/6${isHardMode ? '*' : ''}\\n\\n` + generateEmojiGrid(guesses));\n};\nexport const generateEmojiGrid = guesses => {\n  return guesses.map(guess => {\n    const status = getGuessDistances(guess);\n    const absStatus = status ? Math.abs(status) : undefined;\n    return guess.split('').map((_, i) => {\n      switch (status[i]) {\n        case 0:\n          return 'ðŸŸ©';\n\n        case absStatus != undefined && absStatus > 0 && absStatus <= VERY_CLOSE_DISTANCE:\n          return 'ðŸŸ©';\n\n        default:\n          if (localStorage.getItem('theme') === 'dark') {\n            return 'â¬›';\n          }\n\n          return 'â¬œ';\n      }\n    }).join('');\n  }).join('\\n');\n};","map":{"version":3,"sources":["/Users/matthewwein/Desktop/Game/react-wordle/src/lib/share.ts"],"names":["getGuessDistances","solutionIndex","GAME_TITLE","VERY_CLOSE_DISTANCE","shareStatus","guesses","lost","isHardMode","navigator","clipboard","writeText","length","generateEmojiGrid","map","guess","status","absStatus","Math","abs","undefined","split","_","i","localStorage","getItem","join"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,YAAlC;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,mBAAT,QAA6D,uBAA7D;AAEA,OAAO,MAAMC,WAAW,GAAG,CACzBC,OADyB,EAEzBC,IAFyB,EAGzBC,UAHyB,KAItB;AACHC,EAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CACG,GAAER,UAAW,IAAGD,aAAc,IAAGK,IAAI,GAAG,GAAH,GAASD,OAAO,CAACM,MAAO,KAC5DJ,UAAU,GAAG,GAAH,GAAS,EACpB,MAFD,GAESK,iBAAiB,CAACP,OAAD,CAH5B;AAKD,CAVM;AAYP,OAAO,MAAMO,iBAAiB,GAAIP,OAAD,IAAuB;AACtD,SAAOA,OAAO,CACXQ,GADI,CACCC,KAAD,IAAW;AACd,UAAMC,MAAM,GAAGf,iBAAiB,CAACc,KAAD,CAAhC;AAEA,UAAME,SAAS,GAAGD,MAAM,GAAGE,IAAI,CAACC,GAAL,CAASH,MAAT,CAAH,GAAsBI,SAA9C;AAEA,WAAOL,KAAK,CACTM,KADI,CACE,EADF,EAEJP,GAFI,CAEA,CAACQ,CAAD,EAAIC,CAAJ,KAAU;AACb,cAAQP,MAAM,CAACO,CAAD,CAAd;AACE,aAAK,CAAL;AACE,iBAAO,IAAP;;AACF,aAAKN,SAAS,IAAIG,SAAb,IAA2BH,SAAS,GAAG,CAAZ,IAAiBA,SAAS,IAAIb,mBAA9D;AACE,iBAAO,IAAP;;AACF;AACE,cAAIoB,YAAY,CAACC,OAAb,CAAqB,OAArB,MAAkC,MAAtC,EAA8C;AAC5C,mBAAO,GAAP;AACD;;AACD,iBAAO,GAAP;AATJ;AAWD,KAdI,EAeJC,IAfI,CAeC,EAfD,CAAP;AAgBD,GAtBI,EAuBJA,IAvBI,CAuBC,IAvBD,CAAP;AAwBD,CAzBM","sourcesContent":["import { getGuessDistances } from './statuses'\nimport { solutionIndex } from './words'\nimport { GAME_TITLE } from '../constants/strings'\nimport { VERY_CLOSE_DISTANCE, SOMEWHAT_CLOSE_DISTANCE } from '../constants/settings'\n\nexport const shareStatus = (\n  guesses: string[],\n  lost: boolean,\n  isHardMode: boolean\n) => {\n  navigator.clipboard.writeText(\n    `${GAME_TITLE} ${solutionIndex} ${lost ? 'X' : guesses.length}/6${\n      isHardMode ? '*' : ''\n    }\\n\\n` + generateEmojiGrid(guesses)\n  )\n}\n\nexport const generateEmojiGrid = (guesses: string[]) => {\n  return guesses\n    .map((guess) => {\n      const status = getGuessDistances(guess)\n\n      const absStatus = status ? Math.abs(status) : undefined\n\n      return guess\n        .split('')\n        .map((_, i) => {\n          switch (status[i]) {\n            case 0:\n              return 'ðŸŸ©'\n            case absStatus != undefined && (absStatus > 0 && absStatus <= VERY_CLOSE_DISTANCE):\n              return 'ðŸŸ©'\n            default:\n              if (localStorage.getItem('theme') === 'dark') {\n                return 'â¬›'\n              }\n              return 'â¬œ'\n          }\n        })\n        .join('')\n    })\n    .join('\\n')\n}\n"]},"metadata":{},"sourceType":"module"}